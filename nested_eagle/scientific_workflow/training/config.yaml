defaults:
  - data: zarr
  - dataloader: native_grid
  - datamodule: single
  - diagnostics: evaluation
  - hardware: slurm
  - graph: encoder_decoder_only
  - model: transformer
  - training: stretched
  - _self_

config_validation: True

data:
  forcing:
    - cos_latitude
    - sin_latitude
    - cos_longitude
    - sin_longitude
    - cos_julian_day
    - sin_julian_day
    - cos_local_time
    - sin_local_time
    - insolation
    - lsm
    - orog
  diagnostic:
    - accum_tp
    - u80
    - v80
  normalizer:
    default: mean-std
    std:
      - accum_tp
      - sh2
      - q_100
      - q_150
      - q_200
      - q_250
      - q_300
      - q_400
      - q_500
      - q_600
      - q_700
      - q_850
      - q_925
      - q_1000
    max:
      - orog
    none:
      - cos_latitude
      - sin_latitude
      - cos_longitude
      - sin_longitude
      - cos_julian_day
      - sin_julian_day
      - cos_local_time
      - sin_local_time
      - insolation
      - lsm

dataloader:
  batch_size:
    training: 2
    validation: 2
    test: 1
  num_workers:
    training: 1
    validation: 1
    test: 1
  limit_batches:
    training: null
    validation: null
    test: 1
  dataset:
    cutout:
      # LAM
      - dataset: ${hardware.paths.data}/${hardware.files.lam_dataset}
        trim_edge: [10, 11, 10, 11]
      # Global forcing
      - dataset: ${hardware.paths.data}/${hardware.files.global_dataset}
    adjust: all
    min_distance_km: 0
  training:
    start: 2022-02-01
    end: 2023-01-31
  validation:
    start: 2023-02-01
    end: 2024-01-31
  test:
    start: 2023-02-01
    end: 2024-01-31

diagnostics:
  log:
    wandb:
      enabled: False
      entity: null
    mlflow:
      enabled: False
      offline: False
      authentication: False
      log_model: False
      tracking_uri: null
      experiment_name: "Nested-EAGLE-1deg15km-deterministic"
      project_name: "Nested-EAGLE"
      system: False
      terminal: True
      run_name: null # If set to null, the run name will be the a random UUID
      on_resume_create_child: True
      expand_hyperparams: # Which keys in hyperparams to expand
        - config
      http_max_retries: 35
  plot:
    frequency:
      batch: 500
      epoch: 1
    parameters:
      - gh_500
      - t_850
      - u_850
      - v_850
      - t2m
      - sh2
      - u10
      - v10
      - sp
      - accum_tp
    precip_and_related_fields: [accum_tp]
    callbacks:
      - _target_: anemoi.training.diagnostics.callbacks.plot.GraphTrainableFeaturesPlot
        every_n_epochs: ${diagnostics.plot.frequency.epoch}
      - _target_: anemoi.training.diagnostics.callbacks.plot.PlotLoss
        parameter_groups:
          moisture: [accum_tp]
          sfc_wind: [u10, v10]
        every_n_batches: ${diagnostics.plot.frequency.batch}
      - _target_: anemoi.training.diagnostics.callbacks.plot.PlotSample
        sample_idx: ${diagnostics.plot.sample_idx}
        per_sample: 6
        parameters: ${diagnostics.plot.parameters}
        every_n_batches: ${diagnostics.plot.frequency.batch}
        #Defining the accumulation levels for precipitation related fields and the colormap
        accumulation_levels_plot: [
            0,
            0.05,
            0.1,
            0.25,
            0.5,
            1,
            1.5,
            2,
            3,
            4,
            5,
            6,
            7,
            100,
          ] # in mm
        precip_and_related_fields: ${diagnostics.plot.precip_and_related_fields}
        colormaps: ${diagnostics.plot.colormaps}
      - _target_: anemoi.training.diagnostics.callbacks.plot.PlotSpectrum
        sample_idx: ${diagnostics.plot.sample_idx}
        every_n_batches: ${diagnostics.plot.frequency.batch}
        parameters:
          - gh_500
          - accum_tp
          - t2m
          - u10
          - v10
      - _target_: anemoi.training.diagnostics.callbacks.plot.PlotHistogram
        sample_idx: ${diagnostics.plot.sample_idx}
        every_n_batches: ${diagnostics.plot.frequency.batch}
        precip_and_related_fields: ${diagnostics.plot.precip_and_related_fields}
        parameters:
          - gh_500
          - accum_tp
          - t2m
          - u10
          - v10

graph:
  overwrite: False

  data: "data"
  hidden: "hidden"

  nodes:
    data:
      node_builder:
        _target_: anemoi.graphs.nodes.AnemoiDatasetNodes
        dataset: ${dataloader.dataset}
      attributes: ${graph.attributes.nodes}
    hidden:
      node_builder:
        _target_: anemoi.graphs.nodes.NPZFileNodes
        npz_file: ${hardware.paths.data}/${hardware.files.npz_file}
        lat_key: lat
        lon_key: lon
  edges:
    # Encoder
    - source_name: ${graph.data}
      target_name: ${graph.hidden}
      edge_builders:
        - _target_: anemoi.graphs.edges.KNNEdges
          num_nearest_neighbours: 12
          source_mask_attr_name: null
          target_mask_attr_name: null
      attributes: ${graph.attributes.edges}
    # Decoder
    - source_name: ${graph.hidden}
      target_name: ${graph.data}
      edge_builders:
        - _target_: anemoi.graphs.edges.KNNEdges
          num_nearest_neighbours: 3
          source_mask_attr_name: null
          target_mask_attr_name: null
      attributes: ${graph.attributes.edges}
  attributes:
    nodes:
      # Attributes for data nodes
      cutout_mask:
        _target_: anemoi.graphs.nodes.attributes.CutOutMask
      boundary_mask:
        _target_: anemoi.graphs.nodes.attributes.BooleanNot
        masks:
          _target_: anemoi.graphs.nodes.attributes.CutOutMask
      area_weight:
        _target_: anemoi.graphs.nodes.attributes.SphericalAreaWeights
        norm: unit-max
        fill_value: 0
      lam_area_weight:
        _target_: anemoi.graphs.nodes.attributes.MaskedPlanarAreaWeights
        mask_node_attr_name: cutout_mask
        norm: unit-max
    edges:
      edge_length:
        _target_: anemoi.graphs.edges.attributes.EdgeLength
        norm: unit-max
      edge_dirs:
        _target_: anemoi.graphs.edges.attributes.EdgeDirection
        norm: unit-std

    post_processors:
      - _target_: anemoi.graphs.processors.SortEdgeIndexByTargetNodes
        descending: True # optional, defaults to true

hardware:
  num_gpus_per_model: 1
  paths:
    data: ../data
    graph: ../data
    output: outputs/
  files:
    graph: graph.latentx2.spongex1.12knn.pt
    npz_file: latentx2.spongex1.combined.sorted.npz
    lam_dataset: hrrr.zarr
    global_dataset: gfs.zarr

model:
  num_channels: 512
  processor:
    window_size: 4320
  bounding:
    - _target_: anemoi.models.layers.bounding.ReluBounding #[0, infinity)
      variables:
        - accum_tp
        - sh2
        - q_100
        - q_150
        - q_200
        - q_250
        - q_300
        - q_400
        - q_500
        - q_600
        - q_700
        - q_850
        - q_925
        - q_1000

training:
  max_steps: 3000 # make 30000
  # LR = local_rate * num_gpus_per_node * num_nodes / gpus_per_model
  #    = local_rate * total_gpus / gpus_per_model
  lr:
    warmup: 100 #make 1000
    rate: 0.625e-4
    iterations: ${training.max_steps}
    min: 3e-7
  variable_groups:
    default: sfc
    pl: [gh, u, v, w, t, q]
  metrics:
    - gh_500
    - t_850
    - u_850
    - v_850
  training_loss:
    _target_: anemoi.training.losses.MSELoss
    scalers: ["general_variable", "nan_mask_weights", "node_weights"]
    ignore_nans: False
  scalers:
    general_variable:
      _target_: anemoi.training.losses.scalers.GeneralVariableLossScaler
      weights:
        default: 1
        q: 0.6
        t: 6
        u: 0.8
        v: 0.5
        w: 0.001
        gh: 12
        sp: 10
        u10: 0.1
        v10: 0.1
        accum_tp: 0.025
    node_weights:
      weight_frac_of_total: 0.1
